{"version":3,"sources":["serviceWorker.js","reducers.js","components/ErrorBoundary.js","components/Header.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Footer.js","containers/App.js","actions.js","constants.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","ErrorBoundary","state","hasError","this","setState","props","children","Component","Header","className","SearchBox","searchChange","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","map","robot","key","Footer","href","target","rel","class","App","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8791c44b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return { ...state, searchField: action.payload };\n        default:\n            return state;\n    }\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, isPending: true };\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false };\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payload, isPending: false };\n        default:\n            return state;\n    }\n};\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor() {\n        super();\n        this.state = {\n            hasError: false\n        };\n    }\n\n    componentDidCatch() {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops! That is not good.</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\n\nconst Header = ({ children }) => {\n    return (\n        <header className=\"Header fixed top-0 left-0 h5 w-100 z-2 shadow-5\">\n            {children}\n        </header>\n    );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"Search robots...\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt={name} src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <main className=\"mt7 pa3\">\n            {robots.map(robot => (\n                <Card\n                    key={robot.id}\n                    id={robot.id}\n                    name={robot.name}\n                    email={robot.email}\n                />\n            ))}\n        </main>\n    );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer className=\"pa3 fw1 f6\">\n            <a\n                href=\"https://github.com/mariheck/robofriends\"\n                className=\"light-green link dim\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                <i class=\"github icon\"></i>Source Code\n            </a>\n        </footer>\n    );\n};\n\nexport default Footer;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Footer from '../components/Footer';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    };\n};\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { robots, isPending, searchField, onSearchChange } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        return isPending ? (\n            <h1 className=\"f1 mt5\">Loading...</h1>\n        ) : (\n            <Fragment>\n                <Header>\n                    <h1 className=\"f1 mt5\">RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange} />\n                </Header>\n                <ErrorBoundary>\n                    <CardList robots={filteredRobots} />\n                </ErrorBoundary>\n                <Footer />\n            </Fragment>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error =>\n            dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n        );\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport App from './containers/App';\nimport './index.css';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}