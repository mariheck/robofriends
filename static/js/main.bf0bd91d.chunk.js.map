{"version":3,"sources":["serviceWorker.js","reducers.js","components/ErrorBoundary.js","components/Header.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Mentions.js","components/Footer.js","containers/App.js","actions.js","constants.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialStateSearch","searchField","initialStateRobots","isPending","robots","initialStateMentions","displayMentions","ErrorBoundary","hasError","this","setState","props","children","Component","Header","className","SearchBox","placeholder","searchChange","aria-label","type","onChange","Card","robot","alt","name","src","id","email","CardList","map","key","Mentions","onClick","Footer","href","target","rel","App","onRequestRobots","onSearchChange","onDisplayMentions","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","toggleMentionsDisplay","dispatch","event","payload","value","fetch","response","json","data","isMentionsDisplayed","middlewares","thunkMiddleware","rootReducer","combineReducers","action","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bf0bd91d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    TOGGLE_MENTIONS_DISPLAY\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return { ...state, searchField: action.payload };\n        default:\n            return state;\n    }\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, isPending: true };\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false };\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payload, isPending: false };\n        default:\n            return state;\n    }\n};\n\nconst initialStateMentions = {\n    displayMentions: false\n};\n\nexport const toggleMentionsDisplay = (\n    state = initialStateMentions,\n    action = {}\n) => {\n    switch (action.type) {\n        case TOGGLE_MENTIONS_DISPLAY:\n            return { ...state, displayMentions: action.payload };\n        default:\n            return state;\n    }\n};\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor() {\n        super();\n        this.state = {\n            hasError: false\n        };\n    }\n\n    componentDidCatch() {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops! That is not good.</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\n\nconst Header = ({ children }) => (\n    <header className=\"Header fixed top-0 left-0 h5 w-100 z-2 shadow-5\">\n        {children}\n    </header>\n);\n\nexport default Header;\n","import React from 'react';\n\nconst SearchBox = ({ placeholder, searchChange }) => (\n    <div className=\"pa2\">\n        <input\n            aria-label=\"Search Robots\"\n            className=\"pa3 ba b--green bg-lightest-blue\"\n            type=\"search\"\n            placeholder={placeholder}\n            onChange={searchChange}\n        />\n    </div>\n);\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Card = ({ robot }) => (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <img\n            alt={robot.name}\n            src={`https://robohash.org/${robot.id}?size=200x200`}\n        />\n        <div>\n            <h2>{robot.name}</h2>\n            <p>{robot.email}</p>\n        </div>\n    </div>\n);\n\nexport default Card;\n","import React from 'react';\n\nimport Card from './Card';\n\nconst CardList = ({ robots }) => (\n    <main className=\"mt7 pa3\">\n        {robots.map(robot => (\n            <Card key={robot.id} robot={robot} />\n        ))}\n    </main>\n);\n\nexport default CardList;\n","import React from 'react';\n\nconst Mentions = ({ displayMentions }) => (\n    <main className=\"center mt7 pa4 tl w-80 \">\n        <div\n            className=\"tr light-green link dim pointer\"\n            onClick={() => displayMentions(false)}\n        >\n            <i className=\"big x icon\"></i>\n        </div>\n\n        <h2 className=\"mentions-title\">Website presentation</h2>\n        <h4 className=\"washed-green mb0\">Owner and creator :</h4>\n        <p className=\"washed-green\">\n            Marine Heckler, Web Developer - Toulouse, France\n        </p>\n        <h4 className=\"washed-green mb0\">Host :</h4>\n        <p className=\"washed-green\">\n            GitHub - 88 Colin P Kelly Jr St, San Francisco, CA 94107, United\n            States\n        </p>\n\n        <h2 className=\"mentions-title mt5\">Intellectual property</h2>\n        <p className=\"washed-green lh-copy\">\n            This website was developed for educational and training purposes. It\n            is inspired by Andrei Neagoie’s React tutorial, from his course «The\n            Complete Web Developer in 2020 : Zero to Mastery ». The source code,\n            available on GitHub, is free to use. \n        </p>\n    </main>\n);\n\nexport default Mentions;\n","import React from 'react';\n\nconst Footer = ({ displayMentions }) => (\n    <footer className=\"pa3 fw1 f6\">\n        <a\n            href=\"https://github.com/mariheck/robofriends\"\n            className=\"light-green link dim mr2\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            <i className=\"github icon\"></i>Source Code\n        </a>\n        <span\n            className=\"light-green link dim ml2 pointer\"\n            onClick={() => displayMentions(true)}\n        >\n            <i className=\"file alternate icon\"></i>Mentions\n        </span>\n    </footer>\n);\n\nexport default Footer;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Mentions from '../components/Mentions';\nimport Footer from '../components/Footer';\n\nimport { setSearchField, requestRobots, setMentionsDisplay } from '../actions';\n\nimport './App.css';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error,\n        displayMentions: state.toggleMentionsDisplay.displayMentions\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots()),\n        onDisplayMentions: isMentionsDisplayed =>\n            dispatch(setMentionsDisplay(isMentionsDisplayed))\n    };\n};\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const {\n            robots,\n            isPending,\n            searchField,\n            displayMentions,\n            onSearchChange,\n            onDisplayMentions\n        } = this.props;\n\n        const filteredRobots = robots.filter(robot =>\n            robot.name.toLowerCase().includes(searchField.toLowerCase())\n        );\n\n        return isPending ? (\n            <h1 className=\"f1 mt5\">Loading...</h1>\n        ) : (\n            <Fragment>\n                <Header>\n                    <h1 className=\"f1 mt5\">RoboFriends</h1>\n                    {!displayMentions ? (\n                        <SearchBox\n                            placeholder=\"Search robots...\"\n                            searchChange={onSearchChange}\n                        />\n                    ) : null}\n                </Header>\n                {!displayMentions ? (\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                ) : (\n                    <Mentions displayMentions={onDisplayMentions} />\n                )}\n                <Footer displayMentions={onDisplayMentions} />\n            </Fragment>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n    TOGGLE_MENTIONS_DISPLAY\n} from './constants';\n\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error =>\n            dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n        );\n};\n\nexport const setMentionsDisplay = isDisplayed => ({\n    type: TOGGLE_MENTIONS_DISPLAY,\n    payload: isDisplayed\n});\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\nexport const TOGGLE_MENTIONS_DISPLAY = 'TOGGLE_MENTIONS_DISPLAY';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots, toggleMentionsDisplay } from './reducers';\nimport App from './containers/App';\nimport './index.css';\n\nconst middlewares = [thunkMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nconst rootReducer = combineReducers({\n    searchRobots,\n    requestRobots,\n    toggleMentionsDisplay\n});\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}